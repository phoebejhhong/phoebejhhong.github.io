{"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"title":"A simple case for Do Repeat Yourself","date":"2019-07","slug":"do-repeat-yourself"},"html":"<p> The other day, I wrote a piece of code that went like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">{</span>panelType <span class=\"token operator\">===</span> <span class=\"token string\">\"A\"</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PanelA</span></span> <span class=\"token attr-name\">someProp</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>someProp<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span>panelType <span class=\"token operator\">===</span> <span class=\"token string\">\"B\"</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PanelB</span></span> <span class=\"token attr-name\">someProp</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>someProp<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span>panelType <span class=\"token operator\">===</span> <span class=\"token string\">\"C\"</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PanelC</span></span> <span class=\"token attr-name\">someProp</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>someProp<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<br />\n<p>And it was just ✨liberating✨</p>\n<p>\"Don't repeat yourself\" was one of the first software development principles I've ever learned. (Who didn't?) And it took me considerable time and lots of frustration at prematurely abstracted code until I unlearned the dogma. The day I rage-googled and stumbled upon <a href=\"https://www.sandimetz.com/blog/2016/1/20/the-wrong-abstraction\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">duplication is far cheaper than the wrong abstraction</a>, I was born again as an appreciator of the beauty of simplicity and straightforwardness.</p>\n<p>Say, for some reason, I \"refactored\" the code to look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> panelTypeComponentMap <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"A\"</span><span class=\"token punctuation\">:</span> PanelA<span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">:</span> PanelB<span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">:</span> PanelC<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> PanelComponent <span class=\"token operator\">=</span> panelTypeComponentMap<span class=\"token punctuation\">[</span>panelType<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PanelComponent</span></span> <span class=\"token attr-name\">someProp</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>someProp<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<br />\n<p>❌ Things the \"refactor\" didn't do:</p>\n<ul>\n<li>It didn't make code less bug-prone</li>\n<li>It didn't make code easier to change</li>\n</ul>\n<p>It doesn't particularly reduce the amount of effort needed to do something as simple as adding <code class=\"language-text\">PanelD</code> or removing <code class=\"language-text\">PanelB</code>. In a case a future design change requires passing different props to different panels, however, you can imagine how much more configuration we have to add in the latter code, whereas in the former, to put it in a very technically accurate term, it'd be super easy.</p>\n<p>✅ Things the \"refactor\" did do:</p>\n<ul>\n<li>It made code longer</li>\n<li>It made code more complex</li>\n</ul>\n<p>More lines of code is bad not because of some trivial memory allocation, but because more work means more maintenance. I had to use my brain extra hard to come up with pretty much meaningless variable names like <code class=\"language-text\">panelTypeComponentMap</code> and <code class=\"language-text\">PanelComponent</code>. Imagine the toll on the future readers of the code, learning more <em>stuff</em>, jumping around the code because most likely <code class=\"language-text\">panelTypeComponentMap</code> is defined on the top of the file or, even worse, in a different file.</p>\n<p>This is a very simple example, but I know code like the latter isn't rare in the wild. How not to write such code is easy - use your brain less. Don't fix a problem that does not exist (yet). The original code is just fine unless the number of panels grows so much it actually hurts the code readability. Until then, it's just fine as is.</p>"}}]}}}