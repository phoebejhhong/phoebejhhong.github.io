(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{159:function(e,a,t){"use strict";t.r(a);var n=t(181),s=t(0),o=t.n(s),r=t(160),i=t(166),p=t(164),l=t(167),c=function(e,a){var t=e.node;return o.a.createElement(l.a,{key:a,data:t})};a.default=function(){return o.a.createElement(r.b,{query:u,render:function(e){return o.a.createElement(i.a,null,o.a.createElement(p.a,{title:"Home",keywords:["Phoebe Hong"]}),e.allMarkdownRemark.edges.map(c))},data:n})};var u="177780793"},160:function(e,a,t){"use strict";t.d(a,"b",function(){return u});var n=t(0),s=t.n(n),o=t(5),r=t.n(o),i=t(39),p=t.n(i);t.d(a,"a",function(){return p.a});t(161);var l=s.a.createContext({});function c(e){var a=e.staticQueryData,t=e.data,n=e.query,o=e.render,r=t?t.data:a[n]&&a[n].data;return s.a.createElement(s.a.Fragment,null,r&&o(r),!r&&s.a.createElement("div",null,"Loading (StaticQuery)"))}var u=function(e){var a=e.data,t=e.query,n=e.render,o=e.children;return s.a.createElement(l.Consumer,null,function(e){return s.a.createElement(c,{data:a,query:t,render:n||o,staticQueryData:e})})};u.propTypes={data:r.a.object,query:r.a.string.isRequired,render:r.a.func,children:r.a.func}},161:function(e,a,t){var n;e.exports=(n=t(162))&&n.default||n},162:function(e,a,t){"use strict";t.r(a);t(40);var n=t(0),s=t.n(n),o=t(5),r=t.n(o),i=t(64),p=function(e){var a=e.location,t=e.pageResources;return t?s.a.createElement(i.a,Object.assign({location:a,pageResources:t},t.json)):null};p.propTypes={location:r.a.shape({pathname:r.a.string.isRequired}).isRequired},a.default=p},163:function(e){e.exports={data:{site:{siteMetadata:{title:"Phoebe Hong"}}}}},164:function(e,a,t){"use strict";var n=t(165),s=t(0),o=t.n(s),r=t(5),i=t.n(r),p=t(171),l=t.n(p);function c(e){var a=e.description,t=e.lang,s=e.meta,r=e.keywords,i=e.title,p=n.data.site,c=a||p.siteMetadata.description;return o.a.createElement(l.a,{htmlAttributes:{lang:t},title:i,titleTemplate:"%s | "+p.siteMetadata.title,meta:[{name:"description",content:c},{property:"og:title",content:i},{property:"og:description",content:c},{property:"og:type",content:"website"},{name:"twitter:card",content:"summary"},{name:"twitter:creator",content:p.siteMetadata.author},{name:"twitter:title",content:i},{name:"twitter:description",content:c}].concat(r.length>0?{name:"keywords",content:r.join(", ")}:[]).concat(s)})}c.defaultProps={lang:"en",meta:[],keywords:[],description:""},c.propTypes={description:i.a.string,lang:i.a.string,meta:i.a.arrayOf(i.a.object),keywords:i.a.arrayOf(i.a.string),title:i.a.string.isRequired},a.a=c},165:function(e){e.exports={data:{site:{siteMetadata:{title:"Phoebe Hong",description:"phoebehong.com",author:"@phoebejhhong"}}}}},166:function(e,a,t){"use strict";var n=t(163),s=t(0),o=t.n(s),r=t(5),i=t.n(r),p=t(160),l=t(168),c=t.n(l),u=function(e){var a=e.siteTitle;return o.a.createElement("header",{style:{background:"\n        radial-gradient(ellipse at bottom left, #019D93, transparent),\n        radial-gradient(ellipse at top left, #E863A2, transparent),\n        radial-gradient(ellipse at top right, #F89B60, transparent),\n        radial-gradient(ellipse at bottom right, #1885D8, transparent)\n      ",backgroundSize:"100% 15rem",backgroundColor:"white",marginBottom:"1.45rem",height:"15rem",borderBottom:"1px solid black"}},o.a.createElement("div",{style:{margin:"0 auto",padding:"7rem 0 4rem 0"}},o.a.createElement("span",{className:c.a.badge+" "+c.a.badgeTop},o.a.createElement("span",{role:"img","aria-label":"wave"},"üëã")," welcome to"),o.a.createElement("h1",{className:c.a.title},o.a.createElement(p.a,{to:"/",style:{color:"black",textDecoration:"none",padding:"0.5rem 1rem",border:"2px solid black",boxShadow:"4px 4px black",fontStyle:"italic",textTransform:"uppercase",fontFamily:"roboto"}},a)),o.a.createElement("span",{className:c.a.badge+" "+c.a.badgeBottom},"'s website ",o.a.createElement("span",{role:"img","aria-label":"home"},"üè°"))))};u.propTypes={siteTitle:i.a.string},u.defaultProps={siteTitle:""};var d=u,m=(t(169),t(170),function(e){var a=e.children;return o.a.createElement(p.b,{query:"755544856",render:function(e){return o.a.createElement(o.a.Fragment,null,o.a.createElement("link",{href:"https://fonts.googleapis.com/css?family=EB+Garamond:400,700|Roboto:400,700",rel:"stylesheet"}),o.a.createElement(d,{siteTitle:e.site.siteMetadata.title}),o.a.createElement("div",{style:{margin:"0 auto",maxWidth:960,padding:"0px 1.0875rem 1.45rem",paddingTop:0}},o.a.createElement("main",null,a)),o.a.createElement("footer",{style:{textAlign:"center",marginBottom:"2rem"}},o.a.createElement("small",null,"built with"," ",o.a.createElement("a",{href:"https://www.gatsbyjs.org",target:"_blank",rel:"noopener noreferrer"},"gatsby"),o.a.createElement("span",{style:{margin:"0 0.5rem"}}," | "),"view"," ",o.a.createElement("a",{href:"https://github.com/phoebejhhong/phoebejhhong.github.io/tree/develop",target:"_blank",rel:"noopener noreferrer"},"code"))))},data:n})});m.propTypes={children:i.a.node.isRequired};a.a=m},167:function(e,a,t){"use strict";var n=t(0),s=t.n(n),o=t(160),r=t(5),i=t.n(r),p=t(172),l=t.n(p),c=function(e){var a=e.data;return s.a.createElement(s.a.Fragment,null,s.a.createElement("div",{className:l.a.titleWrapper},s.a.createElement(o.a,{to:a.frontmatter.slug,className:l.a.title},s.a.createElement("h1",null,a.frontmatter.title)),s.a.createElement("span",{className:l.a.date},a.frontmatter.date)),s.a.createElement("div",{dangerouslySetInnerHTML:{__html:a.html}}))};a.a=c,c.propTypes={data:i.a.object}},181:function(e){e.exports={data:{allMarkdownRemark:{edges:[{node:{frontmatter:{title:"What we learn when we review code",date:"2019-07-22",slug:"when-we-review-code",keywords:"code review, software development"},html:"<p><img src=\"./is-this-code-review.png\" alt=\"Is this code review?\"></p>\n<p>As software developers, code review is an important part of our job. Our coworkers in different functions may exchange emails, spreadsheets and invoices. Do they? Well, actually I don't really know what they do. What I do know, however, is that we write code, read code and talk about code all the time. For many of us, the exchange of code is our primary way of communication, and it is mostly done through code review.</p>\n<p> I always try to argue the importance of code review beyond the popular perspective of seeing it as a gatekeeping process, or when occasionally talked about in the context of knowledge sharing, as a way for more senior developers to educate their junior counterparts. These views assume that authors have something to learn from the reviewers, and fail to capture the collaborative and communicative nature of code reviews.</p>\n<p>Yes, the reviewer might pick up critical mistakes that the author didn't see. Yes, authors who lack certain experience can always benefit from the eyes of the more knowledgeable.</p>\n<p>But hey, code review is definitely a two-way street! Reviewers learn a ton too! Here I present a list of some of the things we learn when we review code.</p>\n<h4>üñç We learn more about the codebase</h4>\n<p>In the short term, we learn about that bit of code. And we may be able to say, 'I can fix bugs in this bit of code next time the author is on leave'.</p>\n<p>In the long term, we obtain broader view of the codebase. What are the prevalent patterns that are being used? What are the 3rd party libraries we are using? What are the common pain points? Where are the parts of code that can potentially be combined together? These are some of the questions that can be answered by those who often read code that they didn't write themselves.</p>\n<h4>üñç We learn how to code better</h4>\n<p>There are small immediate wins when you go 'I didn't know you can do that! I will use it next time'. Then there are yet again the broader effect coming from having rich discussions. You can have discussions elsewhere too, but code review is a good place to start them. Here is one example of review comments that often lead to learning: <code class=\"language-text\">XXX is used here but it looks like we can achieve the same with YYY. What do you think are the reasons why one would prefer one to another?</code></p>\n<h4>üñç We learn more about our colleagues</h4>\n<p>We notice their styles, strengths, weaknesses, growth and so on. People management may not be your main gig, but these are definitely nice-to-knows. You'll know who to talk to when you have certain issues, when to give kudos for great contribution, and what relevant feedbacks to give to your peers.</p>\n<h4>üñç We learn how to communicate better</h4>\n<p>An amazing side effect you get from communicating your feedbacks about someone else's work all the time is that you get better and better at sharing your opinions respectfully and effectively. It requires hard work too, but, naturally, we get better at things that we put our time and effort into.</p>\n<h4>üñç ...and more!</h4>"}},{node:{frontmatter:{title:"A simple case for Do Repeat Yourself",date:"2019-07-04",slug:"do-repeat-yourself",keywords:"software development"},html:'<p> The other day, I wrote a piece of code that went like this:</p>\n<div class="gatsby-highlight" data-language="jsx"><pre class="language-jsx"><code class="language-jsx"><span class="token punctuation">{</span>panelType <span class="token operator">===</span> <span class="token string">"A"</span> <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">PanelA</span></span> <span class="token attr-name">someProp</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>someProp<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">}</span>\n<span class="token punctuation">{</span>panelType <span class="token operator">===</span> <span class="token string">"B"</span> <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">PanelB</span></span> <span class="token attr-name">someProp</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>someProp<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">}</span>\n<span class="token punctuation">{</span>panelType <span class="token operator">===</span> <span class="token string">"C"</span> <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">PanelC</span></span> <span class="token attr-name">someProp</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>someProp<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">}</span></code></pre></div>\n<br />\n<p>And it was just ‚ú®liberating‚ú®</p>\n<p>"Don\'t repeat yourself" was one of the first software development principles I\'ve ever learned. (Who didn\'t?) And it took me considerable time and lots of frustration at prematurely abstracted code until I unlearned the dogma. The day I rage-googled and stumbled upon <a href="https://www.sandimetz.com/blog/2016/1/20/the-wrong-abstraction" target="_blank" rel="nofollow noopener noreferrer">duplication is far cheaper than the wrong abstraction</a>, I was born again as an appreciator of the beauty of simplicity and straightforwardness.</p>\n<p>Say, for some reason, I "refactored" the code to look like this:</p>\n<div class="gatsby-highlight" data-language="jsx"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> panelTypeComponentMap <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token string">"A"</span><span class="token punctuation">:</span> PanelA<span class="token punctuation">,</span>\n  <span class="token string">"B"</span><span class="token punctuation">:</span> PanelB<span class="token punctuation">,</span>\n  <span class="token string">"C"</span><span class="token punctuation">:</span> PanelC<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> PanelComponent <span class="token operator">=</span> panelTypeComponentMap<span class="token punctuation">[</span>panelType<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">PanelComponent</span></span> <span class="token attr-name">someProp</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>someProp<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span></code></pre></div>\n<br />\n<p>‚ùå Things the "refactor" didn\'t do:</p>\n<ul>\n<li>It didn\'t make code less bug-prone</li>\n</ul>\n<p>Because the new code looks more organized, it might give you (false) sense of security. Still, any mistake you can make in the previous code, can be made in the latter code in the same manner.</p>\n<ul>\n<li>It didn\'t make code easier to change</li>\n</ul>\n<p>It doesn\'t particularly reduce the amount of effort needed to do something as simple as adding <code class="language-text">PanelD</code> or removing <code class="language-text">PanelB</code>. In a case a future design change requires passing different props to different panels, however, you can imagine how much more configuration we have to add in the latter code, whereas in the former, to put it in a very technically accurate term, it\'d be super easy.</p>\n<p>‚úÖ Things the "refactor" did do:</p>\n<ul>\n<li>It made code longer</li>\n<li>It made code more complex</li>\n</ul>\n<p> More lines of code means more work. I had to use my brain extra hard to come up with pretty much meaningless variable names like <code class="language-text">panelTypeComponentMap</code> and <code class="language-text">PanelComponent</code>. Imagine the toll on the future readers of the code, learning more <em>stuff</em>, jumping around the code because most likely <code class="language-text">panelTypeComponentMap</code> is defined on the top of the file or, even worse, in a different file.</p>\n<p> More lines of code is bad, and to justify it, there has to be real good explicit benefit to cancel out its badness.</p>\n<p>This is a very simple example, but the whole point is to spare writer and reader\'s effort with something small like this so that they can focus on more important matter. Principle here is simple. Don\'t fix a problem that does not exist (yet). Write naive code, your many if statements will do just fine. You can fix it later when it becomes a real problem.</p>'}}]}}}}}]);
//# sourceMappingURL=component---src-pages-index-js-75988390b91a49b4e733.js.map